plugins {
  id 'java'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'nu.studer.jooq' version '9.0'
  id 'org.springframework.boot' version '3.3.3'
}

group = 'com.armw'
version = '1.0'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(22)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'

  // JAVE
  implementation 'ws.schild:jave-core:3.5.0'
  implementation 'ws.schild:jave-nativebin-linux64:3.5.0'
  implementation 'ws.schild:jave-nativebin-win64:3.5.0'

  // Database
  implementation 'org.springframework.boot:spring-boot-starter-jooq'
  jooqGenerator 'org.postgresql:postgresql:42.7.4'
  runtimeOnly 'org.postgresql:postgresql'

  // Lombok
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testCompileOnly 'org.projectlombok:lombok'
  testAnnotationProcessor 'org.projectlombok:lombok'

  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
  useJUnitPlatform()
}

jooq {
  version = '3.19.1'
  configurations {
    main {
      generationTool {
        jdbc {
          driver = 'org.postgresql.Driver'
          url = 'jdbc:postgresql://localhost:5432/postgres'
          user = 'postgres'
          password = 'admin'
        }
        generator {
          name = 'org.jooq.codegen.DefaultGenerator'
          database {
            name = 'org.jooq.meta.postgres.PostgresDatabase'
            inputSchema = 'public'
          }
          target {
            packageName = 'com.armw.audio_sr.jooq'
          }
        }
      }
    }
  }
}

tasks.named('generateJooq').configure {
  // make jOOQ task participate in incremental builds (which is also a prerequisite for build caching)
  allInputsDeclared = true
}
